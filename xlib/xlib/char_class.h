#ifndef _X_CHAR_CLASS_H_
#define _X_CHAR_CLASS_H_

#include "bitliteral.h"

namespace x
{
	using char_class_t = __int16;

	enum CharClass: char_class_t
	{
		WHITESPACE = x::BIT<0, char_class_t>,
		UPPER = x::BIT<1, char_class_t>,
		LOWER = x::BIT<2, char_class_t>,
		VISIBLE = x::BIT<3, char_class_t>,
		DIGIT = x::BIT<4, char_class_t>,
		LETTER = x::BIT<5, char_class_t>,
		BINARY = x::BIT<6, char_class_t>,
		HEXADECIMAL = x::BIT<7, char_class_t>,
		ALPHANUMERIC = x::BIT<8, char_class_t>,
		PRINTABLE = x::BIT<9, char_class_t>,
		CONTROL = x::BIT<10, char_class_t>,
		WORD = x::BIT<11, char_class_t>,
		SYMBOL = x::BIT<12, char_class_t>,
		ASCII = x::BIT<13, char_class_t>
	};

	constexpr char_class_t CHAR_CLASS_MAP[256] = {
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL | WHITESPACE | PRINTABLE,

		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,

		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | CONTROL,

		ASCII | CONTROL,
		ASCII | CONTROL,
		ASCII | WHITESPACE | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,

		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | DIGIT | BINARY | HEXADECIMAL | ALPHANUMERIC | PRINTABLE,
		ASCII | VISIBLE | DIGIT | BINARY | HEXADECIMAL | ALPHANUMERIC | PRINTABLE,

		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | DIGIT | HEXADECIMAL | ALPHANUMERIC | WORD | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,

		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | UPPER | WORD | PRINTABLE,

		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,

		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,

		ASCII | VISIBLE | LETTER | ALPHANUMERIC | UPPER | WORD | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | WORD | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | LOWER | WORD | PRINTABLE,

		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | HEXADECIMAL | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,

		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,

		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | LETTER | ALPHANUMERIC | LOWER | WORD | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | VISIBLE | SYMBOL | PRINTABLE,
		ASCII | CONTROL
	};

	__forceinline constexpr bool is_whitespace(char ch) noexcept
	{
		return (ch >= 0x09 && ch <= 0x0D) || ch == 0x20;
	}

	__forceinline constexpr bool is_upper(char ch) noexcept
	{
		return ch >= 'A' && ch <= 'Z';
	}

	__forceinline constexpr bool is_lower(char ch) noexcept
	{
		return ch >= 'a' && ch <= 'z';
	}

	__forceinline constexpr bool is_visible(char ch) noexcept
	{
		return ch >= 0x21 && ch <= 0x7E;
	}

	__forceinline constexpr bool is_digit(char ch) noexcept
	{
		return ch >= '0' && ch <= '9';
	}

	__forceinline constexpr bool is_letter(char ch) noexcept
	{
		return is_upper(ch) || is_lower(ch);
	}

	__forceinline constexpr bool is_binary(char ch) noexcept
	{
		return ch == '0' || ch == '1';
	}

	__forceinline constexpr bool is_alphanumeric(char ch) noexcept
	{
		return is_letter(ch) || is_digit(ch);
	}

	__forceinline constexpr bool is_printable(char ch) noexcept
	{
		return is_alphanumeric(ch) || is_whitespace(ch);
	}

	__forceinline constexpr bool is_control(char ch) noexcept
	{
		return ch < 0x1F || ch == 0x7F;
	}

	__forceinline constexpr bool is_word(char ch) noexcept
	{
		return is_alphanumeric(ch) || ch == '_';
	}

	__forceinline constexpr bool has_class(char ch, char_class_t chclass) noexcept
	{
		return CHAR_CLASS_MAP[ch] & chclass;
	}

	__forceinline constexpr char_class_t class_of(char ch) noexcept
	{
		return CHAR_CLASS_MAP[ch];
	}
}
#endif //_X_CHAR_CLASS_H_
